[{"/home/artur/Desktop/lampa/client/src/index.tsx":"1","/home/artur/Desktop/lampa/client/src/reportWebVitals.ts":"2","/home/artur/Desktop/lampa/client/src/redux/redux-store.ts":"3","/home/artur/Desktop/lampa/client/src/App.tsx":"4","/home/artur/Desktop/lampa/client/src/redux/cart/cart.reducer.ts":"5","/home/artur/Desktop/lampa/client/src/redux/cart/cart.types.ts":"6","/home/artur/Desktop/lampa/client/src/components/Products/Products-list/ProductsList.tsx":"7","/home/artur/Desktop/lampa/client/src/components/layout/Header.tsx":"8","/home/artur/Desktop/lampa/client/src/components/Products/Product/ProductCard.tsx":"9","/home/artur/Desktop/lampa/client/src/types/types.ts":"10","/home/artur/Desktop/lampa/client/src/components/CartCompoenent/CartContainer.tsx":"11","/home/artur/Desktop/lampa/client/src/components/CartCompoenent/Order/Order.tsx":"12","/home/artur/Desktop/lampa/client/src/components/CartCompoenent/Cart/Cart.tsx":"13","/home/artur/Desktop/lampa/client/src/components/CartCompoenent/Cart/CartList.tsx":"14","/home/artur/Desktop/lampa/client/src/api/api.ts":"15","/home/artur/Desktop/lampa/client/src/components/Products/ProductContainer.tsx":"16"},{"size":622,"mtime":1607707398786,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1607618596921,"results":"19","hashOfConfig":"18"},{"size":637,"mtime":1607761400681,"results":"20","hashOfConfig":"18"},{"size":1192,"mtime":1607769312922,"results":"21","hashOfConfig":"18"},{"size":3772,"mtime":1607769215606,"results":"22","hashOfConfig":"18"},{"size":239,"mtime":1607768720623,"results":"23","hashOfConfig":"18"},{"size":783,"mtime":1607763778022,"results":"24","hashOfConfig":"18"},{"size":947,"mtime":1607712304313,"results":"25","hashOfConfig":"18"},{"size":1015,"mtime":1607763725941,"results":"26","hashOfConfig":"18"},{"size":252,"mtime":1607702741953,"results":"27","hashOfConfig":"18"},{"size":2186,"mtime":1607772632378,"results":"28","hashOfConfig":"18"},{"size":1974,"mtime":1607769292578,"results":"29","hashOfConfig":"18"},{"size":1749,"mtime":1607771360143,"results":"30","hashOfConfig":"18"},{"size":962,"mtime":1607772667687,"results":"31","hashOfConfig":"18"},{"size":327,"mtime":1607771907403,"results":"32","hashOfConfig":"18"},{"size":1277,"mtime":1607769311082,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1wkuegz",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},"/home/artur/Desktop/lampa/client/src/index.tsx",[],["71","72"],"/home/artur/Desktop/lampa/client/src/reportWebVitals.ts",[],"/home/artur/Desktop/lampa/client/src/redux/redux-store.ts",[],"/home/artur/Desktop/lampa/client/src/App.tsx",[],"/home/artur/Desktop/lampa/client/src/redux/cart/cart.reducer.ts",["73"],"import { addedItem } from './../../types/types';\nimport { getProductApi } from './../../api/api';\nimport { ADD_TO_CART, SET_CART, REMOVE_ITEM, REMOVE_ONE_ITEM, SET_ITEM, REMOVE_ALL } from \"./cart.types\"\nimport { item, cart} from '../../types/types'\n\nconst initialState: cart = {\n    items: [],\n    addedItems: [],\n    total: 0\n}\n\ntype InitialStateType = typeof initialState\n\nconst cartReducer = (state = initialState, action: any) => {\n    switch(action.type) {\n        case SET_ITEM: {\n            return {...state, items: [...action.items]}\n\n        }\n        case SET_CART: {\n            return {...state, ...action.state}\n        }\n        case ADD_TO_CART: {\n            const newItem = state.items.find(item => item._id === action.id)\n            const existedItem = state.addedItems.find(item => action.id === item._id)\n            if(existedItem) {\n                const addedItem = {...existedItem, qty: existedItem.qty += 1}\n                addedItem.qty += 1 \n                return{\n                    ...state,\n                    total: state.total + addedItem.price \n                    }\n            } else {\n                if (newItem) {\n                    return{ \n                        ...state,\n                        addedItems: [...state.addedItems, {...newItem, qty: 1}],\n                        total : state.total + newItem.price\n                    }  \n                }\n                \n            }\n            return state\n        }\n        case REMOVE_ITEM: {\n            let itemToRemove = state.addedItems.find((item) => action.id === item._id)\n            let newItems = state.addedItems.filter((item) => action.id !== item._id)\n\n            if (itemToRemove) {\n                let newTotal = state.total - (itemToRemove.price * itemToRemove.qty)\n\n                return {\n                    ...state,\n                    addedItems: newItems,\n                    total: newTotal\n                }\n            }\n            return state\n        }\n        case REMOVE_ONE_ITEM: {\n            const itemToRemove = state.addedItems.find(item => action.id === item._id)\n            if(itemToRemove && itemToRemove.qty === 1) {\n                const newItems = state.addedItems.filter(item => action.id !== item._id)\n                return { ...state, addedItems: newItems, total: state.total - itemToRemove.price }\n            } else {\n                const newAddedItems = state.addedItems.map(item => {\n                    if(item._id === action.id) {\n                        item.qty--\n                    }\n                    return item\n                })\n                if (itemToRemove) {\n                    return { ...state, addedItems: newAddedItems, total:  state.total - itemToRemove.price }\n                }\n            }\n            return state\n        }\n        case REMOVE_ALL: {\n            return { ...state, addedItems: [], total: 0 }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n\ntype setStateType = {\n    type: typeof SET_CART\n    state: InitialStateType\n}\n\ntype setItemType = {\n    type: typeof SET_ITEM\n    items: item[]\n}\n  \nconst setProducts = (items: item[]):setItemType  => ({type: SET_ITEM, items})\n  \nexport const getProductsThunk = () => async (dispath: any) => {\n    dispath(setProducts(await getProductApi()))\n}\n\nexport const setState = (state: InitialStateType): setStateType => ({type: SET_CART, state})\n\nexport const addToCart= (id: string) => {\n    return{\n        type: ADD_TO_CART,\n        id\n    }\n}\n\nexport const removeAll = () => ({\n    type: REMOVE_ALL\n})\n\nexport const removeOneFromItem = (id: string) => ({\n    type: REMOVE_ONE_ITEM,\n    id\n})\n\nexport const removeItem = (id: string) => ({\n        type: REMOVE_ITEM,\n        id\n})\n\nexport default cartReducer","/home/artur/Desktop/lampa/client/src/redux/cart/cart.types.ts",[],"/home/artur/Desktop/lampa/client/src/components/Products/Products-list/ProductsList.tsx",[],"/home/artur/Desktop/lampa/client/src/components/layout/Header.tsx",[],"/home/artur/Desktop/lampa/client/src/components/Products/Product/ProductCard.tsx",[],["74","75"],"/home/artur/Desktop/lampa/client/src/types/types.ts",[],["76","77"],"/home/artur/Desktop/lampa/client/src/components/CartCompoenent/CartContainer.tsx",[],"/home/artur/Desktop/lampa/client/src/components/CartCompoenent/Order/Order.tsx",[],"/home/artur/Desktop/lampa/client/src/components/CartCompoenent/Cart/Cart.tsx",[],"/home/artur/Desktop/lampa/client/src/components/CartCompoenent/Cart/CartList.tsx",[],"/home/artur/Desktop/lampa/client/src/api/api.ts",[],"/home/artur/Desktop/lampa/client/src/components/Products/ProductContainer.tsx",["78"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport ProductsList from './Products-list/ProductsList'\nimport { addToCart } from '../../redux/cart/cart.reducer'\nimport { item } from '../../types/types'\nimport './porductContainer.style.scss'\nimport { AppStateType } from '../../redux/redux-store'\nimport { getProductsThunk } from '../../redux/cart/cart.reducer'\n\ntype ProductContainer = {\n  cartItems: item[]\n  addToCart: (id: string ) => void,\n  getProductsThunk: () => void\n}\n\nconst ProductContainer = ({cartItems, getProductsThunk, addToCart}: ProductContainer) => {\n  const [produsts, setProducts] = useState(cartItems)\n\n  useEffect(() => {\n      setProducts(cartItems)\n  }, [cartItems])\n\n  useEffect(() => {\n      getProductsThunk()\n    }, [getProductsThunk])\n  \n  return (\n    <div className='generalProdComp'>\n      <ProductsList items={produsts} addToCart={addToCart} />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  cartItems: state.cartReducer.items\n})\n\nconst mapDispatchToProps= (dispatch: any) => ({\n  getProductsThunk() {\n    dispatch(getProductsThunk())\n  },\n  addToCart: (id: string) => {dispatch(addToCart(id))}\n})\n\nexport default connect (mapStateToProps, mapDispatchToProps)(ProductContainer)",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":10,"nodeType":"85","messageId":"86","endLine":1,"endColumn":19},{"ruleId":"79","replacedBy":"87"},{"ruleId":"81","replacedBy":"88"},{"ruleId":"79","replacedBy":"89"},{"ruleId":"81","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":16,"column":7,"nodeType":"85","messageId":"93","endLine":16,"endColumn":23},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"@typescript-eslint/no-unused-vars","'addedItem' is defined but never used.","Identifier","unusedVar",["94"],["95"],["94"],["95"],"@typescript-eslint/no-redeclare","'ProductContainer' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]